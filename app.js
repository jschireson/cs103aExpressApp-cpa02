/*
  app.js -- This creates an Express webserver with login/register/logout authentication
*/

// *********************************************************** //
//  Loading packages to support the server
// *********************************************************** //
// First we load in all of the packages we need for the server...
const createError = require("http-errors"); // to handle the server errors
const express = require("express");
const path = require("path");  // to refer to local paths
const cookieParser = require("cookie-parser"); // to handle cookies
const session = require("express-session"); // to handle sessions using cookies
const bodyParser = require("body-parser"); // to handle HTML form input
const debug = require("debug")("personalapp:server"); 
const layouts = require("express-ejs-layouts");



// *********************************************************** //
//  Connecting to the database
// *********************************************************** //

const mongoose = require( 'mongoose' );
// const mongodb_URI = 'mongodb://localhost:27017/cs103a'
const mongodb_URI = 'mongodb+srv://jschireson:A23hkL7cvc98!!@cluster0.gd3ly.mongodb.net/cpa02?retryWrites=true&w=majority'

mongoose.connect( mongodb_URI, { useNewUrlParser: true, useUnifiedTopology: true} );
const db = mongoose.connection;
db.on('error', console.error.bind(console, 'connection error:'));
db.once('open', function() {console.log("we are connected!!!")});


// *********************************************************** //
// Initializing the Express server 
// This code is run once when the app is started and it creates
// a server that respond to requests by sending responses
// *********************************************************** //
const app = express();

var Schema = mongoose.Schema;

// Artist schema
var favoriteArtist = new Schema({
  artistName: String,
});

// Initialize favoriteArtist model
var savedFavoriteArtist = mongoose.model('savedFavoriteArtist', favoriteArtist);
// app.use('models/Favorite.js', fave)


// Here we specify that we will be using EJS as our view engine
app.set("views", path.join(__dirname, "views"));
app.set("view engine", "ejs");



// this allows us to use page layout for the views 
// so we don't have to repeat the headers and footers on every page ...
// the layout is in views/layout.ejs
app.use(layouts);

// Here we process the requests so they are easy to handle
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(bodyParser.urlencoded({ extended: false }));

// Here we specify that static files will be in the public folder
app.use(express.static(path.join(__dirname, "public")));

// Here we enable session handling using cookies
app.use(
  session({
    secret: "zzbbyanana789sdfa8f9ds8f90ds87f8d9s789fds", // this ought to be hidden in process.env.SECRET
    resave: false,
    saveUninitialized: false
  })
);

// *********************************************************** //
//  Defining the routes the Express server will respond to
// *********************************************************** //


// here is the code which handles all /login /signin /logout routes
const auth = require('./routes/auth')
app.use(auth)

// middleware to test is the user is logged in, and if not, send them to the login page
const isLoggedIn = (req,res,next) => {
  if (res.locals.loggedIn) {
    next()
  }
  else res.redirect('/login')
}

// specify that the server should render the views/index.ejs page for the root path
// and the index.ejs code will be wrapped in the views/layouts.ejs code which provides
// the headers and footers for all webpages generated by this app
app.get("/", (req, res, next) => {
  // const found = savedFavoriteArtist.find().where('artistName').equals('Jacob');
  // console.log("FOUND");
  // console.log(found);
  var userArtists = "";
  const search = "jacob";
  console.log(search);
  // var thename = "Andrew";
  // db.collection.find( { "name" : { $regex : new RegExp(thename, "i") } } );
  // savedFavoriteArtist.find({"artistName":{ $regex : new RegExp(search, "i") }},function (err, artist) {
  //   // if (err) return handleError(err);
  //   // Prints "Space Ghost is a talk show host".
    
  //   console.log(artist);
  //   console.log("TT");
  //   const a_name = artist.map(function (artist){
  //     return (artist.artistName)
  //   });
  //   console.log(a_name);

  //   // const userArtists = artist.artistName;
  //   console.log(userArtists);
    
  //   // return nameToDisplay;
  // });
  res.render("index", {
    // a_name:a_name,
  });
});

app.post("/library", (req, res, next) => {
  const libraryQuery = req.body.libsearch;
  console.log(libraryQuery);
  savedFavoriteArtist.find({"artistName":{ $regex : new RegExp(libraryQuery, "i") }},function (err, artist) {
    const libraryTitle = artist.map(function (artist){
      return (artist.artistName)
    });
    console.log(libraryTitle);
    res.render("library", {
      libraryTitle:libraryTitle,
    });
  });

});

/**
 * =============================
 * Make seperate API calls 
 * firstcall = to functions FirstAPI call
 * secondcall = to functions SecondAPI call
 * finalresponse = somelogic(responseone, responsetwo)
 * res.send(finalresponse)
 * 
 * 
 * return seperate promises in the API calls
 */

app.post("/search", (req, res, next) => {
  console.log(req.body);
  console.log(req.body.fname);
  console.log(req.body.type);
  const searchTerm = req.body.fname;
  const searchType = req.body.type;


  const axios = require("axios");
  const options = {
    method: 'GET',
    url: 'https://spotify23.p.rapidapi.com/search/',
    params: {
      q: searchTerm,
      type: 'multi',
      offset: '0',
      limit: '10',
      numberOfTopResults: '5'
    },
    headers: {
      'X-RapidAPI-Host': 'spotify23.p.rapidapi.com',
      'X-RapidAPI-Key': '485c547bb2mshaeeafaaea6aef8fp194522jsnd556af08f428'
    }
  };

  axios.request(options).then(function (response) {

    console.log(searchType);
    // const queryResults = response.data[searchType].items;
    const queryAlbums = response.data.albums.items;
    console.log(queryAlbums);

    const albumURI = queryAlbums.map(function (queryAlbums){
      return (queryAlbums.data.uri)
    });
    console.log("URIURIURIURIURI");
    console.log(albumURI);
    const queryTopResults = response.data.topResults.items;
    const queryArtists = response.data.artists.items;
    
    console.log(queryArtists[0].data.visuals.avatarImage.sources);
   
    const artistImageURL = queryArtists.map(function (queryArtists){
      return (queryArtists.data.visuals.avatarImage)
    });
    const filtered = artistImageURL.filter(function (el) {
      return el != null;
    });
    const filtered2 = filtered.map(function(filtered){
      return(filtered.sources);
    })
    // console.log(artistImageURL);
    // console.log("filtered");
    // console.log(filtered);
    // console.log("filtered2");
    // console.log(filtered2[0]);

    const queryEpisodes = response.data.episodes.items;
    const queryGenres = response.data.genres.items;
    const queryPlaylists = response.data.playlists.items;
    const queryPodcasts = response.data.podcasts.items;
    const queryTracks = response.data.tracks.items;
    const queryUsers = response.data.users.items;
    const albumIdCall = albumURI.toString().replaceAll('spotify:album:', '');
    console.log(albumIdCall.toString());
    const albumInfo = {
      method: 'GET',
      url: 'https://spotify23.p.rapidapi.com/albums/',
      
      params: {ids: albumIdCall},
      headers: {
        'X-RapidAPI-Host': 'spotify23.p.rapidapi.com',
        'X-RapidAPI-Key': '485c547bb2mshaeeafaaea6aef8fp194522jsnd556af08f428'
      }
    };
    
    // axios.request(albumInfo).then(function (r) {
    //   const albumsInfoArr = r.data.albums;
    //   console.log("*********************************");
    //   console.log(albumsInfoArr);
    //   // console.log("data");
    //   // console.log(albumsInfoArr.data);
    //   // console.log("popularity");
    //   // console.log(albumsInfoArr.popularity);
    //   // console.log("tracks");
    //   // console.log(albumsInfoArr.tracks);

    //   const popularity = albumsInfoArr.map(function (albumsInfoArr){
    //     return (albumsInfoArr.popularity);
    //   });      
    //   console.log(popularity);



    // }).catch(function (error) {
    //   console.error(error);
    // });

    // console.log(queryResults);
    res.render('results', { 
      // queryResults : queryResults, 
      searchType: searchType, 
      queryTopResults: queryTopResults, 
      queryAlbums: queryAlbums,
      albumURI: albumURI,
      // popularity: popularity,
      queryEpisodes: queryEpisodes,
      queryArtists: queryArtists,
      filtered: filtered,
      filtered2: filtered2,
      queryGenres: queryGenres,
      queryPlaylists: queryPlaylists,
      queryPodcasts: queryPodcasts,
      queryTracks: queryTracks,
      queryUsers: queryUsers,
    });
  }).catch(function (error) {
    console.error(error);
  });
  });

app.post("/save", (req, res, next) => {
  // Define schema
  console.log(req.body.artistFormName);
  let artistToSave = req.body.artistFormName;

  const favoriteArtistSchema = new savedFavoriteArtist({
    artistName: artistToSave,
  });

  favoriteArtistSchema.save();
  
});

app.get("/results", (req, res, next) => {
  res.render("results");
});

app.get("/demopage", (req, res, next) => {
  res.render("demo");
});

app.get("/sandbox", 
  (req, res, next) => {
        res.render("sandbox");
      }
);



// here we catch 404 errors and forward to error handler
app.use(function(req, res, next) {
  next(createError(404));
});

// this processes any errors generated by the previous routes
// notice that the function has four parameters which is how Express indicates it is an error handler
app.use(function(err, req, res, next) {
  // set locals, only providing error in development
  res.locals.message = err.message;
  res.locals.error = req.app.get("env") === "development" ? err : {};
  // render the error page
  res.status(err.status || 500);
  res.render("error");
});


// *********************************************************** //
//  Starting up the server!
// *********************************************************** //
//Here we set the port to use between 1024 and 65535  (2^16-1)
const port = "3455";
app.set("port", port);

// and now we startup the server listening on that port
const http = require("http");
const { name } = require("ejs");
const Favorite = require("./models/Favorite");
const { dir } = require("console");
const server = http.createServer(app);

server.listen(port);

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

server.on("error", onError);

server.on("listening", onListening);

module.exports = app;
